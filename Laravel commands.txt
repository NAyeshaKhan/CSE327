>>laravel new P1
*Note: The migration tables are for creating the fields only. Once that is over, they won't affect the DB

For 1-to-M: hasMany<=>belongsToOne
For 1-to-1: hasOne=>belongsTo
	These relations need foreign IDs in migration tables
For M-to-M : belongsToMany<=>belongsToMany
        This relation doesn't have foreign ID in migrations, but needs a pivot table with $table->foreign('user_id')->references('id')->on('users'); or $table->foreignId(index)->constrained(); for each table involved.


Authentication(Basic)
=====================
>>composer require laravel/ui --HAS ALL ILLUMINATE CLASSES
>>php artisan ui vue --auth  //add login controllers too
>>npm install && npm run dev
>>npm run dev
-->creates login and register

DB
==
>>copy con database\D1.sqlite 
--> for sqlite DB
  OR: edit .env for the mySQL database you created in phpAdmin

Authentication:login registration
authorization: Who is allowed to do what

					Jetstream: https://www.youtube.com/watch?v=NiQSNjWKLfU

DO AFTER AUTHENTICATION HAS BEEN INSTALLED
=========
>>composer require laravel/jetstream
>>php artisan jetstream:install livewire
>>npm install
>>npm run dev
>>php artisan migrate

>>php artisan make:model Role -m
>>php artisan make:seeder RoleSeeder
>>php artisan make:migration add_roles_fields_to_users_table
>>php artisan migrate

Add fields that will be on top of the authentication ones. Add them to users table's fillable path as well. Don't use a constrained data field here!!
Add role_id to app/Actions/Fortify/CreateNewUser


>>php artisan make:controller Students/LessonController --resource
>>php artisan make:controller Teachers/CourseController --resource
>>php artisan make:controller Admin/UserController --resource
>>php artisan make:middleware CheckRole


Laravel Breeze  https://masteringbackend.com/posts/multiple-role-based-authentications/
==============
>>composer require laravel/breeze --dev   THIS IS FOR AUTH SCAFFOLDING
>>php artisan breeze:install
>>npm run install
>>npm run dev

ROLE PACKAGES :Do the authentication part first. Fix the namespaces
=============

https://www.learn2torials.com/a/laravel-authentication-based-on-roles

>>composer require spatie/laravel-permission

>>composer require laravelcollective/html
config/app.php
--------------
'providers' => [

	....

	Spatie\Permission\PermissionServiceProvider::class,

],

>>php artisan migrate


PHP TINKER
==========
//Creating Model object
>>$user= new \App\Models\User();

>> $user->name="Ray";
>> $user->email="Ray@email.com";
>> $user->password="AAAAAAAA";
>> $role= \App\Models\Role::find(1);

//Saving attributes for the object
>> $user->save();

>> $able= \App\Models\Ability::find(2);
>> $role->allowTo($able);
>> $role->save();
>> $user->assignRole($role);
>> $user->save();

// find a specific user and see their attributes
App\User::where('username', 'dillon')->first();

// Retreiving relationship of a user and the relationship type 
>>> $user->address();
=> Illuminate\Database\Eloquent\Relations\HasMany {#678}

// Retrieving inherited data
>>> $user->address;
=> Illuminate\Database\Eloquent\Collection {#699
     all: [
       App\Address {#702
         id: 1,
         user_id: 1,
         street_address: "68 Dame Street",
         suburb: "Inner City",
         town: "Dublin",
         postcode: "493857",
         country: "Ireland",
         created_at: "2017-02-19 21:44:28",
         updated_at: "2017-02-19 21:44:28",
       },
     ],
   }

  